function dbPanelInspect(~,~,fig,defP)
%dbPanelMSA - for multiple sample analysis

% We need to have a singly ticked file, which corresponds to the correct
% format.
[data,file,flag] = checkFile(fig);

% Check that we have compatibility
if ~strcmp(flag,'msa')
    ed = errordlg('Incompatible file(s)');
    pause(1.5);
    delete(ed);
    return
end

% Here we need to determine other stuff...
[allHist] = determineInfo(data);

% Draw the panel's bits and bobs
[pan] = panelBits(fig,file,allHist,data.opts);

% Add callback to change path
set(pan.groups,'Callback',{@dbUpdateTableMSA,pan,allHist});

% And the go button...
set(pan.proc,'Callback',{@dbOptionsInspect,data,fig,pan});

% Callback for translation file
set(pan.translate,'Callback',{@translationFile,fig,defP});

% Run the table initialisation function
dbUpdateTableMSA([],[],pan,allHist);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [data,file,flag] = checkFile(fig)
% We need a single MSA approved file from the table to be selected

td = get(fig.tab,'Data');
chk = cell2mat(td(:,1)) == 1;

% Check that we have 1 file
if sum(chk) ~= 1
    flag = 'multiple';
    file = [];
    data = [];
    return
end

% Open the file briefly
file = [td{chk,2} filesep td{chk,3}];
info = matfile(file,'Writable',false);

% Determine if this file is suitable
fn = fieldnames(info);
if any(strcmp(fn,'tag'))
    if strcmp(info.tag,'msa')
        flag = 'msa';        
    else
        flag = 'incompatible';        
    end
else
    flag = 'notag';
end

% If wrong file, then quit and return
if ~strcmp(flag,'msa')
    return
end

% Just read the data and pass it on
data = info.data;

% Just the file name
file = td{chk,3};

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [allHist] = determineInfo(data)

allHist = unique(data.meta.histID);

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [pan] = panelBits(fig,file,allHist,opts)
% Window with the little options for manipulating the figure...

% This is where we draw everything
parent = fig.panel;

fS = 16;

% Heading
uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0 0.95 1 0.05],...
    'Style','text',...
    'String',file,...
    'FontSize',24,...
    'BackgroundColor',[1 1 1]);

% Box for groups (open ended number)
uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0 0.85 1 0.05],...
    'Style','text',...
    'String','Groups',...
    'FontSize',fS,...
    'BackgroundColor',[1 1 1]);
pan.groups = uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0 0.55 0.25 0.3],...
    'Style','edit',...
    'String',{'Cancer';'Healthy'},...
    'FontSize',fS,...
    'Min',1,...
    'Max',10);

% Table for assigning groups
pan.table = uitable('Parent',parent,...
    'Units','normalized',...
    'Position',[0.25 0.55 0.75 0.3]);

% Pixel combination - this may now have already been performed earlier in
% the analysis in order to reduce the computational burden. Let's look at
% it here
if isfield(opts,'pixelCombo')
    switch opts.pixelCombo
        case {'All','All-QC'}
            strings = {'All';'Random';'Tissue type mean';'Tissue type median'};
            defVal = 1;
            
        case 'Random 5'
            strings = {'All';'Tissue type mean';'Tissue type median'};
            defVal = 1;
            
        case 'TT Mean'
            strings = {'Mean spectrum'};
            defVal = 1;
                
        case 'TT Median'
            strings = {'Median spectrum'};
            defVal = 1;
            
        otherwise
            error('there is no otherwise');
    end
else
    % Then just show the usual stuff...
    strings = {'All';'Random';'Tissue type mean';'Tissue type median'};
    defVal = 1;
end         
uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0 0.4 0.25 0.1],...
    'Style','text',...
    'String','Pixel selection',...
    'FontSize',fS,...
    'BackgroundColor',[1 1 1]);
pan.pixel = uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0.275 0.4 0.2 0.1],...
    'Style','popupmenu',...
    'String',strings,...
    'FontSize',fS-2,...
    'Value',defVal);

% Normalisation
uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0 0.35 0.25 0.1],...
    'Style','text',...
    'String','Normalisation',...
    'FontSize',fS,...
    'BackgroundColor',[1 1 1]);
pan.norm = uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0.275 0.35 0.2 0.1],...
    'Style','popupmenu',...
    'String',{'None';'TIC';'PQN-Mean';'PQN-Median'},...
    'FontSize',fS-2,...
    'Value',1,...
    'Enable','off');

% m/z range(s)
uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0.5 0.4 0.25 0.1],...
    'Style','text',...
    'String','m/z Ranges',...
    'FontSize',fS,...
    'BackgroundColor',[1 1 1]);
pan.mzRange = uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0.775 0.35 0.225 0.15],...
    'Style','edit',...
    'String','1 2000',...
    'FontSize',fS,...
    'Min',1,...
    'Max',3,...
    'Enable','off');

% File for translation of code - this is a nuclear option which will only
% be possible for me... for the time being...
if strcmp(getUser,'jmckenzi')
    tmpVis = 'on';
else
    tmpVis = 'off';
end
pan.translate = uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0.01 0.2 0.48 0.05],...
    'Style','pushbutton',...
    'String','< --- Translation File --- >',...
    'FontSize',fS,...
    'Visible',tmpVis);


% Process button
pan.proc = uicontrol('Parent',parent,...
    'Units','normalized',...
    'Position',[0.81 0.01 0.18 0.1],...
    'Style','pushbutton',...
    'String','Go',...
    'FontSize',fS);

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function translationFile(src,~,~,defP)
% Get the excel file which will be used as a translation file...

% Ask the user for a file
[file.nam,file.dir,flag] = uigetfile({'*.xlsx; *.xls'},...
    'File Select',defP);

% If no file selected, then quit/do nothing
if flag == 0
    set(src,'String','< --- No Translation File --- >',...
        'UserData',[]);    
    return
end

% Set the file to be the user data, and 
set(src,'String',file.nam,...
    'UserData',file);    


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
